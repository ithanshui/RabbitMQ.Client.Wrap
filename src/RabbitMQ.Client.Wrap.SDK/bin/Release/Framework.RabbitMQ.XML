<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Framework.RabbitMQ</name>
    </assembly>
    <members>
        <member name="T:Framework.RabbitMQ.Authorization">
            <summary>
            
            </summary>
        </member>
        <member name="M:Framework.RabbitMQ.Authorization.#ctor(System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="userName"></param>
            <param name="password"></param>
            <param name="vhost"></param>
            <param name="hostName"></param>
            <param name="port"></param>
        </member>
        <member name="P:Framework.RabbitMQ.Authorization.UserName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Framework.RabbitMQ.Authorization.Password">
            <summary>
            
            </summary>
        </member>
        <member name="P:Framework.RabbitMQ.Authorization.VHost">
            <summary>
            
            </summary>
        </member>
        <member name="P:Framework.RabbitMQ.Authorization.HostName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Framework.RabbitMQ.Authorization.Port">
            <summary>
            
            </summary>
        </member>
        <member name="T:Framework.RabbitMQ.ExchangeType">
            <summary>
            
            </summary>
        </member>
        <member name="F:Framework.RabbitMQ.ExchangeType.Direct">
            <summary>
            引导模式
            </summary>
        </member>
        <member name="F:Framework.RabbitMQ.ExchangeType.Fanout">
            <summary>
            广播模式
            </summary>
        </member>
        <member name="F:Framework.RabbitMQ.ExchangeType.Topic">
            <summary>
            
            </summary>
        </member>
        <member name="T:Framework.RabbitMQ.Factory">
            <summary>
            消息通道工厂
            </summary>
        </member>
        <member name="M:Framework.RabbitMQ.Factory.CreateSubscriber(Framework.RabbitMQ.Authorization,Framework.RabbitMQ.ISubscribeEvent)">
            <summary>
            创建一个订阅对象
            </summary>
            <param name="authorization"></param>
            <param name="subscribeEvent"></param>
            <returns></returns>
        </member>
        <member name="M:Framework.RabbitMQ.Factory.CreatePublisher(Framework.RabbitMQ.Authorization)">
            <summary>
            创建一个发布对象
            </summary>
            <param name="authorization"></param>
            <returns></returns>
        </member>
        <member name="T:Framework.RabbitMQ.IPublisher">
            <summary>
            
            </summary>
        </member>
        <member name="M:Framework.RabbitMQ.IPublisher.Publish(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="routingKey"></param>
            <param name="message"></param>
        </member>
        <member name="M:Framework.RabbitMQ.IPublisher.Publish(System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="exchange"></param>
            <param name="routingKey"></param>
            <param name="message"></param>
        </member>
        <member name="T:Framework.RabbitMQ.IQueue">
            <summary>
            
            </summary>
        </member>
        <member name="M:Framework.RabbitMQ.IQueue.QueueDeclare(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            
            </summary>
            <param name="queue"></param>
            <param name="arguments"></param>
        </member>
        <member name="M:Framework.RabbitMQ.IQueue.QueueBind(System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="exchange"></param>
            <param name="queue"></param>
            <param name="routingKey"></param>
        </member>
        <member name="M:Framework.RabbitMQ.IQueue.ExchangeDeclare(System.String,Framework.RabbitMQ.ExchangeType,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            
            </summary>
            <param name="exchange"></param>
            <param name="exchangeType"></param>
            <param name="arguments"></param>
        </member>
        <member name="T:Framework.RabbitMQ.ISubscribeEvent">
            <summary>
            订阅事件
            </summary>
        </member>
        <member name="M:Framework.RabbitMQ.ISubscribeEvent.Call(System.String)">
            <summary>
            回调方法
            </summary>
            <param name="receiveMessage"></param>
            <returns></returns>
        </member>
        <member name="T:Framework.RabbitMQ.ISubscriber">
            <summary>
            
            </summary>
        </member>
        <member name="M:Framework.RabbitMQ.ISubscriber.Subscribe(System.String)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Framework.RabbitMQ.LogException">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="exception"></param>
        </member>
        <member name="T:Framework.RabbitMQ.Queue">
            <summary>
            
            </summary>
        </member>
        <member name="F:Framework.RabbitMQ.Queue.ConnectionFactory">
            <summary>
            
            </summary>
        </member>
        <member name="F:Framework.RabbitMQ.Queue.Connection">
            <summary>
            
            </summary>
        </member>
        <member name="F:Framework.RabbitMQ.Queue.Channel">
            <summary>
            
            </summary>
        </member>
        <member name="F:Framework.RabbitMQ.Queue.BasicProperties">
            <summary>
            
            </summary>
        </member>
        <member name="F:Framework.RabbitMQ.Queue.LogExceptionHandle">
            <summary>
            
            </summary>
        </member>
        <member name="M:Framework.RabbitMQ.Queue.#ctor(Framework.RabbitMQ.LogException)">
            <summary>
            
            </summary>
            <param name="logException"></param>
        </member>
        <member name="M:Framework.RabbitMQ.Queue.QueueDeclare(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            
            </summary>
            <param name="queue"></param>
            <param name="arguments"></param>
        </member>
        <member name="M:Framework.RabbitMQ.Queue.QueueBind(System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="exchange"></param>
            <param name="queue"></param>
            <param name="routingKey"></param>
        </member>
        <member name="M:Framework.RabbitMQ.Queue.ExchangeDeclare(System.String,Framework.RabbitMQ.ExchangeType,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            
            </summary>
            <param name="exchange"></param>
            <param name="exchangeType"></param>
            <param name="arguments"></param>
        </member>
        <member name="T:Framework.RabbitMQ.Result">
            <summary>
            
            </summary>
        </member>
        <member name="P:Framework.RabbitMQ.Result.IsSuccess">
            <summary>
            
            </summary>
        </member>
        <member name="P:Framework.RabbitMQ.Result.FailMessage">
            <summary>
            
            </summary>
        </member>
        <member name="M:Framework.RabbitMQ.Result.Success">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Framework.RabbitMQ.Result.Failure(System.String)">
            <summary>
            
            </summary>
            <param name="failMessage"></param>
            <returns></returns>
        </member>
    </members>
</doc>
